算法和数据结构精髓：

三分理解，三分背写，三分练习。肌肉记忆


DS

二进制的位运算,对内存运算，不需要转换成十进制，所以处理速度非常快。



肌肉记忆，练到足够熟练

递归
动态规划

分治回溯

BSP

DSP


基本数据结构 及其所拥有的操作。

代表性算法代码模板

重用算法时空复杂度结论

算法有自己的描述语言： ADL （Algorithm Describe Language）

数据的存储结构是建立一种由逻辑结构到存储结构的映射：
顺序、链接、索引和散列四种方法


测试方法

Black Box Methods  黑盒法
测试程序的功能、测试case用例
White Box Methods  白盒法  侧重测试程序的代码结构
Statement Coverage  语句覆盖: 使程序中的每一条语句都至少执行一次。
Decision Coverage   分支覆盖 ：使程序中的每一个分枝都至少执行一次。


下面简单地介绍几种数据逻辑结构上的常用的操作。
插入 删除 修改
排序\查找：查找几乎是各种数据结构中不可或缺的操作，查找是许多计算机程序中最耗时的部分，因此对查找算法应认真加以研究。




线性表均可由 ：数组和链表实现
栈均可由 ：数组和链表实现（首选数组）

线性表的操作
1.	创建一个线性表；
2.	确定线性表的长度；
3.	确定线性表是否为空；
4.	存取表中第k个结点的字段值；
5.	查找指定字段值在表中的位置；
6.	删除表中第k个结点；
7.	在表中第k个结点后插入一个新结点；

堆栈的基本操作：
push ( item ) :		压入一个元素（插入）；
pop ( item ) :		弹出一个元素（删除）；
peek ( item ) :		存取栈顶元素值；
clear ( ) :			清空栈；
IsEmpty ( ) :		判断栈是否为空；

队列的基本操作：
QInsert ( item ):		向队尾添加元素（入队）；
QDelete ( ) :		删除队首元素（出队）；
QFront ( ) :			获取队首的元素值；
IsFull ( ) :			判断队列是否为满；
IsEmpty ( ) :		判断队列是否为空；

循环队列



解决问题：
矩阵的数学对象，常用数据方式组织
特殊矩阵：三角矩阵、对角矩阵、对称矩阵和稀疏矩阵等

集合 ：数组实现
并 交 差 运算




树
二叉树
高度为k的二叉树中至多有 [2^(k+1)]－1 （2^0＋ 2^1＋……+ 2^k） 个结点

满二叉树的定义： 一棵高度为k的满二叉树，是具有  2k+1－1个结点且高度为 k 的二叉树(最多节点数目)
满二叉树的特点是：
① 叶结点都在第k层上；
② 每个分支结点都有两个子结点；
③ 叶结点的个数等于非叶结点个数加1(根据引理4.2.3和②)

二叉树的遍历 【递归算法/非递归算法】
先根序列： DLR
中根序列： LDR
后根序列： LRD

创建二叉树
复制二叉树

线索二叉树


给出递归算法后，尽可能给出非递归算法



排序

排序的时间开销可用算法执行中关键词的比较次数与数据的移动次数来衡量。

排序算法的稳定性:当Kρ(i)=Kρ(j)并且i<j时，总有ρ(i)<ρ(j)，这里1≤i，j≤n，则我们就称该排序过程具有稳定性.


排序算法性能标准：
排序的时间开销(时间复杂性)
算法执行时所需的附加存储空间（空间复杂性）【数组和链表 】
排序算法的稳定性
算法基本思想	插入排序，希尔排序、冒泡、交换排序，直接选择排序，堆排序，合并排序、分划交换排序
算法适用条件


淘汰赛的思想



查找（检索）
查找成功返回
查找失败并插入

线性表查找、树结构查找、基于检索结构的查找、数字查找和散列查找等方法


有序表的顺序查找 【固定长度的表】
二叉判定树有助于了解对半查找和斐波那契查找的特性

建立一个二叉查找树【】
建立一个ALV树【】
建立一个B树【】


散列函数必须满足如下条件：
便于快速计算；
没有冲突（所谓“冲突”系指，对于K1  K2，却有h(K1) =h(K2)）.

但是，没有冲突的散列函数h是很不好找
便于快速计算；
极少出现冲突.

冲突消解方法
拉链法
线性探查法
伪随机探查法
二次探查法
双重散列法
拉链方法（chaining）/开散列法（opening hashing）
开地址法（open addressing）/闭散列法（closed hashing）



hash函数
压缩法
除法散列函数
乘法散列函数
平方取中法
抽取法







说明数组和链表的区别，各有何优缺点
区别：数组占用连续的内存空间，链表不要求结点的空间连续
各自的优缺点：
① 插入与删除操作：由于数组在插入与删除数据时需移动大量的数据元素，而链表只需要改变一些指针的链接，因此，链表比数组易于实现数据的插入和删除操作。
② 内存空间的占用情况：因链表多了一个指针域，故较浪费空间，因此，在空间占用方面，数组优于链表。
③ 数据的存取操作：访问链表中的结点必须从表头开始，是顺序的存取方式，而数组元素的访问是通过数组下标来实现的，是随机存取方式，因此，在数据存取方面，数组优于链表。
④ 数据的合并与分离：链表优于数组，因为只需要改变指针的指向。




算法

怎样处理算法：如何构造算法、操作算法、理解算法、分析算法。

导引与数学基础
基本的算法设计策略
 分治法
 贪心方法
 动态规划
 回溯法
 分支-限界法
基本算法分析方法
NP-难度和NP-完全问题




递归经典问题
Tower of Hanoi
棋子的移动问题
简单的0/1背包问题
n个元素的全排列
自然数拆分（正整数拆分）
